/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface UofgAlert {
    }
    interface UofgBackToTop {
        /**
          * The number of pixels the user has to scroll down before the button appears.
         */
        "threshold": number;
    }
    interface UofgCard {
        /**
          * The URL the card should link to. If this property is set, the card will be rendered as an anchor ("a" tag).
         */
        "href": string;
    }
    interface UofgFooter {
    }
    interface UofgHeader {
        /**
          * The title of the department/topic that the header is being used for. For example, for the Convocation pages, this would be set to "Convocation".
         */
        "pageTitle": string;
        /**
          * The URL to the home/landing page of the department/topic the header is being used for. For example, for the Convocation pages, this would be set to "https://www.uoguelph.ca/convocation/".
         */
        "pageUrl": string;
    }
    interface UofgMenu {
        /**
          * Controls whether the menu should automatically collapse when the focused element in the page is not contained within the menu (e.g. it's button or content). This is useful for when you want the menu to collapse whenever a user interacts with any other part of the page.
         */
        "autoCollapse": boolean;
        /**
          * Collapse the menu. This is the same as setting the expanded state to false.
          * @returns empty Promise.
         */
        "collapse": () => Promise<void>;
        /**
          * Expand the menu. This is the same as setting the expanded state to true.
          * @returns empty Promise.
         */
        "expand": () => Promise<void>;
        /**
          * Get the current expanded state of the menu.
          * @returns A promise which will resolve to the current expanded state.
         */
        "getExpanded": () => Promise<boolean>;
        /**
          * Set the expanded state of the menu.
          * @param value The new expanded state.
         */
        "setExpanded": (value: boolean) => Promise<void>;
        /**
          * Toggle the expanded state of the menu.
          * @returns A promise which will resolve to the new expanded state.
         */
        "toggle": () => Promise<boolean>;
    }
    interface UofgModal {
        /**
          * Used to determine whether the modal should be rendered as an alert dialog. This is useful for when you want to use the modal to alert the user of something, rather than to ask the user to make a decision. If this is set to true, the modal will be rendered with a role of "alertdialog" instead of "dialog".
         */
        "alertDialog": boolean;
        /**
          * Used to determine whether the modal should open automatically when the component is first rendered. It is important to ensure this is only set to true for ONE modal on the page.
         */
        "autoOpen": boolean;
        /**
          * Used to determine whether the modal content is centered vertically.
         */
        "centered": boolean;
        /**
          * Closes the modal.
          * @returns empty Promise.
         */
        "close": () => Promise<void>;
        /**
          * Get the current state of the modal.
          * @returns A promise which will resolve to true when the modal is open, or false when the modal is closed.
         */
        "getState": () => Promise<boolean>;
        /**
          * The label for the modal. It is recommended that you set this to describe the modal's content. This is required for accessibility.
         */
        "label": string;
        /**
          * Opens the modal.
          * @returns empty Promise.
         */
        "open": () => Promise<void>;
        /**
          * Set the state of the modal.
          * @param value The new state, set it to true to open the modal, or false to close the modal.
         */
        "setState": (value: boolean) => Promise<void>;
        /**
          * Used to determine whether clicking on the backdrop of the modal will close the modal. If this is set to true, clicking on the backdrop will NOT close the modal.
         */
        "staticBackdrop": boolean;
        /**
          * Toggle the state of the modal.
          * @returns A promise which will resolve to true (if the modal opened) or false (if the modal closed).
         */
        "toggle": () => Promise<boolean>;
    }
}
export interface UofgMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUofgMenuElement;
}
export interface UofgModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUofgModalElement;
}
declare global {
    interface HTMLUofgAlertElement extends Components.UofgAlert, HTMLStencilElement {
    }
    var HTMLUofgAlertElement: {
        prototype: HTMLUofgAlertElement;
        new (): HTMLUofgAlertElement;
    };
    interface HTMLUofgBackToTopElement extends Components.UofgBackToTop, HTMLStencilElement {
    }
    var HTMLUofgBackToTopElement: {
        prototype: HTMLUofgBackToTopElement;
        new (): HTMLUofgBackToTopElement;
    };
    interface HTMLUofgCardElement extends Components.UofgCard, HTMLStencilElement {
    }
    var HTMLUofgCardElement: {
        prototype: HTMLUofgCardElement;
        new (): HTMLUofgCardElement;
    };
    interface HTMLUofgFooterElement extends Components.UofgFooter, HTMLStencilElement {
    }
    var HTMLUofgFooterElement: {
        prototype: HTMLUofgFooterElement;
        new (): HTMLUofgFooterElement;
    };
    interface HTMLUofgHeaderElement extends Components.UofgHeader, HTMLStencilElement {
    }
    var HTMLUofgHeaderElement: {
        prototype: HTMLUofgHeaderElement;
        new (): HTMLUofgHeaderElement;
    };
    interface HTMLUofgMenuElementEventMap {
        "expanded": void;
        "collapsed": void;
        "animationStarted": boolean;
        "animationEnded": boolean;
    }
    interface HTMLUofgMenuElement extends Components.UofgMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUofgMenuElementEventMap>(type: K, listener: (this: HTMLUofgMenuElement, ev: UofgMenuCustomEvent<HTMLUofgMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUofgMenuElementEventMap>(type: K, listener: (this: HTMLUofgMenuElement, ev: UofgMenuCustomEvent<HTMLUofgMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUofgMenuElement: {
        prototype: HTMLUofgMenuElement;
        new (): HTMLUofgMenuElement;
    };
    interface HTMLUofgModalElementEventMap {
        "opened": void;
        "closed": void;
    }
    interface HTMLUofgModalElement extends Components.UofgModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUofgModalElementEventMap>(type: K, listener: (this: HTMLUofgModalElement, ev: UofgModalCustomEvent<HTMLUofgModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUofgModalElementEventMap>(type: K, listener: (this: HTMLUofgModalElement, ev: UofgModalCustomEvent<HTMLUofgModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUofgModalElement: {
        prototype: HTMLUofgModalElement;
        new (): HTMLUofgModalElement;
    };
    interface HTMLElementTagNameMap {
        "uofg-alert": HTMLUofgAlertElement;
        "uofg-back-to-top": HTMLUofgBackToTopElement;
        "uofg-card": HTMLUofgCardElement;
        "uofg-footer": HTMLUofgFooterElement;
        "uofg-header": HTMLUofgHeaderElement;
        "uofg-menu": HTMLUofgMenuElement;
        "uofg-modal": HTMLUofgModalElement;
    }
}
declare namespace LocalJSX {
    interface UofgAlert {
    }
    interface UofgBackToTop {
        /**
          * The number of pixels the user has to scroll down before the button appears.
         */
        "threshold"?: number;
    }
    interface UofgCard {
        /**
          * The URL the card should link to. If this property is set, the card will be rendered as an anchor ("a" tag).
         */
        "href"?: string;
    }
    interface UofgFooter {
    }
    interface UofgHeader {
        /**
          * The title of the department/topic that the header is being used for. For example, for the Convocation pages, this would be set to "Convocation".
         */
        "pageTitle"?: string;
        /**
          * The URL to the home/landing page of the department/topic the header is being used for. For example, for the Convocation pages, this would be set to "https://www.uoguelph.ca/convocation/".
         */
        "pageUrl"?: string;
    }
    interface UofgMenu {
        /**
          * Controls whether the menu should automatically collapse when the focused element in the page is not contained within the menu (e.g. it's button or content). This is useful for when you want the menu to collapse whenever a user interacts with any other part of the page.
         */
        "autoCollapse"?: boolean;
        /**
          * Dispatched whenever the menu is expanding or collapsing and the animation has ended. This event is not dispatched if the animation is disabled (e.g. due to reduced motion, css variable set to none, or lack of Web Animations API support).
         */
        "onAnimationEnded"?: (event: UofgMenuCustomEvent<boolean>) => void;
        /**
          * Dispatched whenever the menu is expanding or collapsing and the animation has started. This event is not dispatched if the animation is disabled (e.g. due to reduced motion, css variable set to none, or lack of Web Animations API support).
         */
        "onAnimationStarted"?: (event: UofgMenuCustomEvent<boolean>) => void;
        /**
          * Dispatched whenever the menu is collapsed whether by user interaction or programmatically (e.g. collapse()).
         */
        "onCollapsed"?: (event: UofgMenuCustomEvent<void>) => void;
        /**
          * Dispatched whenever the menu is expanded whether by user interaction or or programmatically (e.g. expand()).
         */
        "onExpanded"?: (event: UofgMenuCustomEvent<void>) => void;
    }
    interface UofgModal {
        /**
          * Used to determine whether the modal should be rendered as an alert dialog. This is useful for when you want to use the modal to alert the user of something, rather than to ask the user to make a decision. If this is set to true, the modal will be rendered with a role of "alertdialog" instead of "dialog".
         */
        "alertDialog"?: boolean;
        /**
          * Used to determine whether the modal should open automatically when the component is first rendered. It is important to ensure this is only set to true for ONE modal on the page.
         */
        "autoOpen"?: boolean;
        /**
          * Used to determine whether the modal content is centered vertically.
         */
        "centered"?: boolean;
        /**
          * The label for the modal. It is recommended that you set this to describe the modal's content. This is required for accessibility.
         */
        "label"?: string;
        /**
          * Dispatched whenever the modal is closed whether by user interaction or programmatically (e.g. close()).
         */
        "onClosed"?: (event: UofgModalCustomEvent<void>) => void;
        /**
          * Dispatched whenever the modal is opened whether by user interaction or or programmatically (e.g. open()).
         */
        "onOpened"?: (event: UofgModalCustomEvent<void>) => void;
        /**
          * Used to determine whether clicking on the backdrop of the modal will close the modal. If this is set to true, clicking on the backdrop will NOT close the modal.
         */
        "staticBackdrop"?: boolean;
    }
    interface IntrinsicElements {
        "uofg-alert": UofgAlert;
        "uofg-back-to-top": UofgBackToTop;
        "uofg-card": UofgCard;
        "uofg-footer": UofgFooter;
        "uofg-header": UofgHeader;
        "uofg-menu": UofgMenu;
        "uofg-modal": UofgModal;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "uofg-alert": LocalJSX.UofgAlert & JSXBase.HTMLAttributes<HTMLUofgAlertElement>;
            "uofg-back-to-top": LocalJSX.UofgBackToTop & JSXBase.HTMLAttributes<HTMLUofgBackToTopElement>;
            "uofg-card": LocalJSX.UofgCard & JSXBase.HTMLAttributes<HTMLUofgCardElement>;
            "uofg-footer": LocalJSX.UofgFooter & JSXBase.HTMLAttributes<HTMLUofgFooterElement>;
            "uofg-header": LocalJSX.UofgHeader & JSXBase.HTMLAttributes<HTMLUofgHeaderElement>;
            "uofg-menu": LocalJSX.UofgMenu & JSXBase.HTMLAttributes<HTMLUofgMenuElement>;
            "uofg-modal": LocalJSX.UofgModal & JSXBase.HTMLAttributes<HTMLUofgModalElement>;
        }
    }
}
